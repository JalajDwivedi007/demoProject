JUnit (Recent version JUnit-5 supports java 8 features)
Testing tool
Open Source
Used for unit testing
Does automative testing
Graphs which represent testing analysis.
Green color - Success
Failure - Red
Also provides information about testcases
Kind of regression testing. Checks newly written code affects does
not affect the previously written code.

Unit Testing
-> The smallest testable parts of an application called units are individually
   and independently scrutinized for proper operation.
-> We can rectify the code in testing phase itself.

Writing single test case
-> Right click on src folder
-> jUnit test
-> Select jUnit 4 on radio buttons
-> Select next
-> In your predefined code select the function you want to test.

Then
Calculator.java
package example1;

public class Calculator {
	
	public int fact(int n) {
		int fact=1;
		for(int i=1;i<=n;i++) {
			fact=fact*i;
		}
		return fact;
	}
	public static void main(String[] args) {
		Calculator c = new Calculator();
		
		System.out.println(c.fact(5));
	}

}

CalculatorTest.java
package example1;

import static org.junit.Assert.*;

import org.junit.Test;

public class CalculatorTest {

	@Test
	public void testFact() {
		Calculator c = new Calculator();
		// assertEquals(expectedresult,function) <- function declaration
		assertEquals(120,c.fact(5)); //Assumption that for value of 5 output is 120
	}

}

Another example
Measurement.java
package example1;

public class Measurement {

	private int value;
	
	public Measurement(int n) {
		value=n;
	}
	public int getValue() {
		return value;
	}
	public void add(Measurement m) {
		value = value +m.getValue();
	}
	public void sub(Measurement m) {
		value = value - m.getValue();
	}
}

MeasurementTest.java
package example1;

import static org.junit.Assert.*;

import org.junit.Test;

public class MeasurementTest {

	@Test
	public void testAdd() {
		Measurement m = new Measurement(5);
		m.add(m);
		assertEquals(10,m.getValue());
	}

	@Test
	public void testSub() {
		Measurement m = new Measurement(5);
		m.sub(m);
		assertEquals(0,m.getValue());
	}

}

Some annotations in jUnit => @annotation
Allannotate.java
package example1;

import static org.junit.Assert.*;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

public class Allannotate {

	@Test
	public void test1() {
		System.out.println("Test method1 called");
	}
	
	@Before //Executed for all the test cases before test case
	public void testBefore() {
		System.out.println("Before method");
	}
	
	@After //Executed for all the test cases after test case
	public void testAfter() {
		System.out.println("After method");
	}
	
	@BeforeClass //Executed for all the test cases after test case once. The first one to get executed
	public static void testBeforeClass() {
		System.out.println("Before Class Method");
	}
	@AfterClass //Executed for all the test cases after test case once. The last one to get executed
	public static void testAfterClass() {
		System.out.println("After class method");
	}
	
	@Test
	public void testIgnore() {
		System.out.println("Test Ignored");
	}
	@Ignore //The test case under this annotation will be ignored so no output is there
	@Test
	public void test2() {
		System.out.println("Test2 methods");
	}

}

Output
Before Class Method
Before method
Test method1 called
After method
Before method
Test2 methods
After method
After class method


Checking Exception test case
ArithCalc.java
package example1;

public class ArithCalc {
	
	public int calc(int a,int b) {
		return a/b;
	}
}
ArithCalcTest.java
package example1;

import static org.junit.Assert.*;

import org.junit.Test;

public class ArithCalcTest {

	@Test(expected=ArithmeticException.class)
	public void testCalc() {
		ArithCalc a = new ArithCalc();
		a.calc(2, 0);
	}

}


For Exceptions if using only Exception class for creating user defined exceptions
be sure to handle the exception in test case also.
If you don't want to do that just use RuntimeException Class.

Using Exception Class
UserNotFoundException.java
package example1;

public class UserNotFoundException extends Exception{
	public UserNotFoundException(String str) {
		super(str);
	}
}
StudentList.java
package example1;
import java.util.*;
import example1.UserNotFoundException;
public class StudentList {
	ArrayList<String> arr;
	public StudentList(ArrayList<String> list) {
		arr=list;
	}
	
	public String findInRecords(String name) throws UserNotFoundException{
		Iterator<String> it = arr.iterator();
		while(it.hasNext()) {
			if(it.next()==name) {
				System.out.println("Name found!");
				return it.next();
			}
		
		
		
		
		throw new UserNotFoundException("The user is not here");
		
//		throw new UserNotFoundException("The user is not here");;
//		throw new UserNotFoundException("The user is not here");
		
	}
		return "";
	}
}
StudentListTest.java
package example1;
//import example1.UserNotFoundException;
import static org.junit.Assert.*;

import org.junit.Test;
import java.util.*;
public class StudentListTest {

	@Test(expected=UserNotFoundException.class) 
	public void testFindInRecords() throws UserNotFoundException{
		ArrayList<String> list = new ArrayList<String>();
		list.add("Hello");
		list.add("Yo");
		list.add("Hi");
//		System.out.println(list);
		StudentList ls=new StudentList(list);
		ls.findInRecords("Jalaj");
		
	}

}

Using RuntimeException Class
package example1;

public class UserNotFoundException extends RuntimeException{
	public UserNotFoundException(String str) {
		super(str);
	}
}

StudentList.java
package example1;
import java.util.*;
import example1.UserNotFoundException;
public class StudentList {
	ArrayList<String> arr;
	public StudentList(ArrayList<String> list) {
		arr=list;
	}
	
	public String findInRecords(String name) throws UserNotFoundException{
		Iterator<String> it = arr.iterator();
		while(it.hasNext()) {
			if(it.next()==name) {
				System.out.println("Name found!");
				return it.next();
			}
		
		
		
		
		throw new UserNotFoundException("The user is not here");
		
//		throw new UserNotFoundException("The user is not here");;
//		throw new UserNotFoundException("The user is not here");
		
	}
		return "";
	}
}
StudentListTest.java
package example1;
//import example1.UserNotFoundException;
import static org.junit.Assert.*;

import org.junit.Test;
import java.util.*;
public class StudentListTest {

	@Test(expected=UserNotFoundException.class) 
	public void testFindInRecords(){
		ArrayList<String> list = new ArrayList<String>();
		list.add("Hello");
		list.add("Yo");
		list.add("Hi");
//		System.out.println(list);
		StudentList ls=new StudentList(list);
		ls.findInRecords("Jalaj");
		
	}

}

For passing multiple values for testing
Prime.java
package example1;

public class Prime {
	public Boolean validate(Integer primeNumber) {
		for(int i=2;i<(primeNumber/2);i++) {
			if(primeNumber%i==0) {
				return false;
			}
		}
		return true;
	}
}

PrimeTest.java
package example1;
import java.util.*;
import static org.junit.Assert.*;

import java.util.Arrays;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
@RunWith(Parameterized.class)
public class PrimeTest {

	private Integer input;
	Boolean expectedResult;
	Prime p;
//	public PrimeTest(){}
	public PrimeTest(Integer nums,Boolean expectedResult) {
		input = nums;
		this.expectedResult=expectedResult;
	}
	@Parameterized.Parameters
	public static Collection pNums() {
		return Arrays.asList(new Object[][] {
			{8,false},
			{3,true},
			{9,false},
			{19,true},
			{6,false},
		});
	}
	@Before
	public void initiate() {
		p=new Prime();
	}
	@Test
	public void testValidate() {
		
		assertEquals(expectedResult,p.validate(input));
	}

}

Using some other methods
package example1;

import static org.junit.Assert.*;

import org.junit.Test;

public class TestProg {

	@Test
	public void test() {
		String s1="hello";
		String s2="admin";
		
		String str1 = new String("hello");
		String str2 = new String("hello");
		String sn=null;
//		assertEquals(s1,s2);
//		assertEquals(str1,str2);
		
//		assertTrue(s1.length()>s2.length());
//		assertFalse(s1.length()>s2.length());
		assertNull(sn); //Isn't null
	}

}

Creating Test Suite
Right click on package then other then under Java->JUnit->JUnit Tes Suite
->Used for executing all the test classes inside a package.
So new test suite for example1 package
AllTests.java
package example1;

import org.junit.runner.RunWith;
import org.junit.runners.Suite;
import org.junit.runners.Suite.SuiteClasses;

@RunWith(Suite.class)
@SuiteClasses({ Allannotate.class, ArithCalcTest.class, CalculatorTest.class, MeasurementTest.class, PrimeTest.class,
		StudentListTest.class, TestProg.class })
public class AllTests {

}

Parameterized test for factorial

package example1;

import static org.junit.Assert.*;

import java.util.Arrays;
import java.util.Collection;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
@RunWith(Parameterized.class)
public class CalculatorTest {
	
	private Integer input;
	private Integer expectedResult;
	private Calculator c;

	public CalculatorTest(Integer nums,Integer expectedResult) {
		input = nums;
		this.expectedResult=expectedResult;
	}
	@Parameterized.Parameters
	public static Collection pNums() {
		return Arrays.asList(new Object[][] {
			{2,2},
			{3,6},
			{5,120},
			{6,720},
			{1,1},
		});
	}
	@Before
	public void initiate() {
		c=new Calculator();
	}
	@Test
	public void testValidate() {
		Integer output = c.fact(input);
		assertEquals(expectedResult,output);
//		assertEquals(24,c.fact(4));
	}

}

In JUnit -5
Calculator.java
package example;

public class Calculator {
	public static int add(int a,int b) {
		return a+b;
	}
}

AfterAnnotationTest.java
package example;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.RepeatedTest;
import org.junit.jupiter.api.RepetitionInfo;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInfo;

class AfterAnnotationTest {
	
	@RepeatedTest(2) //How many times we want to execute the test case
	void addNum(TestInfo testinfo,RepetitionInfo repetitioninfo) {
		System.out.println("Running test : "+repetitioninfo.getCurrentRepetition());
		assertEquals(2,Calculator.add(1, 1),"adding two numbers");
	}
	@Disabled //No notes will be taken for it.
	@Test
	void testCalc() {
		
		assertEquals(6,Calculator.add(2, 4));
	}
	@AfterAll
	public static void cleanUp() {
		System.out.println("After all cleanup methods");
	}
	@AfterEach
	public void cleanUpEach() {
		System.out.println("After each test case");
	}
	

}

Exceptions in jUnit-5
package example;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

class ExpectedExceptionTest {

	@Test
	void testExpectedException() {
		NumberFormatException nf= assertThrows(NumberFormatException.class,()->{
			Integer.parseInt("One");
		},"Number Format Exception is expected");
		assertEquals("For input string: \"One\"",nf.getMessage());
	}

}
Deriving Exceptions from another exception
package example;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

class ExpectedExceptionTest {

	@Test
	void testExpectedException() {
		NumberFormatException nf= assertThrows(NumberFormatException.class,()->{
			Integer.parseInt("One");
		},"Number Format Exception is expected");
		assertEquals("For input string: \"One\"",nf.getMessage());
	}
	
	@Test
	void testWithParentType() {
		assertThrows(IllegalArgumentException.class,()->{
			Integer.parseInt("One");
		});
	}

}

package example;

import static org.junit.jupiter.api.Assertions.*;

import java.util.concurrent.TimeUnit;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

@Timeout(3) //Since the thread will be sleeping for 5 seconds so we need larger timeout period
class TimeoutTest {

	@Test
	void testInterrupted() throws InterruptedException {
		TimeUnit.SECONDS.sleep(5);
	}

}
This will run
package example;

import static org.junit.jupiter.api.Assertions.*;

import java.util.concurrent.TimeUnit;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

@Timeout(10) //Since the thread will be sleeping for 5 seconds so we need larger timeout period
class TimeoutTest {

	@Test
	void testInterrupted() throws InterruptedException {
		TimeUnit.SECONDS.sleep(5);
	}

}

Some other codes
package example;

import static org.junit.jupiter.api.Assertions.*;

import java.time.Duration;
import java.util.concurrent.TimeUnit;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;

@Timeout(10) //Since the thread will be sleeping for 5 seconds so we need larger timeout period
class TimeoutTest {

	@Test
	void testInterrupted() throws InterruptedException {
		TimeUnit.SECONDS.sleep(5);
	}
	@Test
	void testGetValue() throws InterruptedException{
		assertTimeout(Duration.ofSeconds(4),()->{
			getValue();
		});
	}
	String getValue() throws InterruptedException{
		TimeUnit.SECONDS.sleep(2);
		return "";
	}
}




